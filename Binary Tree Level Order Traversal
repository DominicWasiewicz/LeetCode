//Problem: https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        
        if(root == null){
            return list;
        }
        queue.add(root);
        
        while(!queue.isEmpty()){
            int queueLength = queue.size();
            List<Integer> currentLevel = new ArrayList<>();
            for(int i = 0; i < queueLength; i++){
                TreeNode currentNode = queue.poll();
                currentLevel.add(currentNode.val);
            
                if(currentNode.left != null){
                    queue.add(currentNode.left);
                }if(currentNode.right != null){
                    queue.add(currentNode.right);
                }
            }
            list.add(currentLevel);
        }
        return list;
    }
}
